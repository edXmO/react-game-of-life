{"version":3,"sources":["components/Button.js","components/Controls.js","components/Grid.js","components/MicroLife.js","components/Logo.js","components/Heading.js","components/InfoSection.js","components/Section.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Btn","styled","button","Button","label","onClick","active","setActive","isRunning","disabled","ControlsWrapper","div","Controls","runSimulation","runningRef","resetGame","rows","useState","current","newGrid","i","push","Array","fill","ROWS","WIDTH","GridWrapper","Grid2D","HEIGHT","Cell","alive","running","undefined","Grid","setRunning","grid","setGrid","editGrid","row","col","val","useRef","useCallback","j","COLS","numberOfNeighbors","filter","length","setTimeout","renderGrid","useMemo","map","MicroGrid","MicroLife","from","Math","floor","random","runMicroGrid","useEffect","GameLogoWrapper","Headings","HeadingLogo","h1","SubHeadingLogo","h4","InfoButton","Logo","HeadingWrapper","Heading","InfoSectionWrapper","section","QuoteWrapper","Quote","InfoSection","SectionWrapper","Section","AppWrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc673f21.chunk.js","sourcesContent":["import React from \"react\"\r\nimport styled from \"styled-components\";\r\n\r\nconst Btn = styled.button`\r\n    flex: 1;\r\n    font-family: monospace;\r\n    color: #25221e;\r\n    font-weight: bold;\r\n    font-size: 1.6rem;\r\n    text-decoration: none;\r\n    padding: 1rem 2rem 1rem 2rem;\r\n    cursor: pointer;\r\n    text-decoration: none;\r\n    border-radius: 10px;\r\n    border: 0;\r\n    background: transparent;\r\n    transition: background 300ms ease-in;\r\n    &:active, &:focus{\r\n        background-color: white;       \r\n    }\r\n`\r\n\r\nconst Button = ({ label, onClick, active, setActive, isRunning }) => {\r\n\r\n    return <Btn\r\n            disabled={isRunning}\r\n            active={active} \r\n            onClick={() => {\r\n                onClick();\r\n                setActive(!active)\r\n            }}>\r\n                {label}\r\n            </Btn>\r\n}\r\n\r\nexport default Button;","import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * COMPONENTS\r\n */\r\nimport Button from \"./Button\";\r\n\r\n\r\nconst ControlsWrapper = styled.div`\r\n    margin: 1rem 0 1rem 0;\r\n    width: 50rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    background: rgba( 45, 49, 58, 0.25);\r\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\r\n    backdrop-filter: blur( 5.0px );\r\n    -webkit-backdrop-filter: blur( 5.0px );\r\n    border-radius: 10px;\r\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\r\n`\r\n\r\nconst Controls = ({runSimulation, runningRef, resetGame, rows}) => {\r\n\r\n    const [active, setActive] = useState();\r\n\r\n    return (\r\n        <ControlsWrapper>\r\n            <Button \r\n                active={active}\r\n                setActive={setActive}\r\n                onClick={() => {\r\n                if(runningRef.current === true){\r\n                    return runningRef.current = false;;\r\n                } else if(!runningRef.current){\r\n                    runningRef.current = true;\r\n                    runSimulation();\r\n                }\r\n            }} \r\n            label={runningRef.current ? \"Stop\" : \"Start\"}\r\n            />\r\n            <Button \r\n                active={false}\r\n                setActive={setActive}\r\n                onClick={() => {\r\n                    runningRef.current = false;\r\n                    const newGrid = [];\r\n                    for(let i = 0; i < rows; i++){ \r\n                        newGrid.push(new Array(rows).fill(0));\r\n                    }\r\n                    resetGame(newGrid);           \r\n                }} \r\n                label={\"Reset\"} />\r\n        </ControlsWrapper>\r\n    );\r\n}\r\n\r\nexport default Controls;","import React, { useState, useMemo, useCallback, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * COMPONENTS\r\n */\r\nimport Controls from \"./Controls\";\r\n\r\nconst WIDTH = 50;\r\nconst HEIGHT = 50;\r\n\r\nconst RES = 2;\r\n\r\nconst ROWS = WIDTH / RES;\r\nconst COLS = HEIGHT / RES;\r\n\r\nconst GridWrapper = styled.div`\r\n    display:flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst Grid2D = styled.div`\r\n    display: grid;\r\n    height: ${HEIGHT}rem;\r\n    width: ${WIDTH}rem;\r\n    grid-template-rows: repeat(${ROWS}, 1fr);\r\n    grid-template-columns: repeat(${COLS}, 1fr);\r\n    background: rgba( 45, 49, 58, 0.65 );\r\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\r\n    backdrop-filter: blur( 5.0px );\r\n    -webkit-backdrop-filter: blur( 5.0px );\r\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\r\n`;\r\n\r\nconst Cell = styled.div`\r\n    background-color: ${({alive}) => alive === 1 ? \"pink\" : \"transparent\"};\r\n    height: ${RES}rem;\r\n    width: ${RES}rem;\r\n    border: ${({running}) => !running ? `0.5px   solid #FFF` : undefined}\r\n`\r\n\r\nconst Grid = () => {\r\n\r\n    const [running, setRunning] = useState(false);\r\n    const [grid, setGrid] = useState(() => {\r\n        const rows = [];\r\n        for(let i = 0; i < ROWS; i++){ \r\n            rows.push(new Array(ROWS).fill(0));\r\n        }\r\n        return rows;\r\n    });\r\n\r\n    const editGrid = (grid, row, col, val = 1) => {\r\n        const newGrid = [...grid];\r\n        newGrid[row][col] = val;\r\n        return newGrid;\r\n    }\r\n\r\n    const runningRef = useRef(running);\r\n\r\n    const runSimulation = useCallback(() => {\r\n        if(!runningRef.current) return;\r\n\r\n        let newGrid = [...grid];\r\n\r\n        for(let i = 0; i < ROWS; i++){\r\n            for(let j = 0; j < COLS; j++){\r\n                if(i === 0 || j === 0 || i === ROWS - 1 || j === COLS - 1) continue;\r\n\r\n                let numberOfNeighbors = [\r\n                    grid[i - 1][j],\r\n                    grid[i - 1][j + 1],\r\n                    grid[i - 1][j - 1],\r\n                    grid[i][j - 1],\r\n                    grid[i + 1 ][j],\r\n                    grid[i + 1][j - 1],\r\n                    grid[i  + 1][j + 1],\r\n                    grid[i][j + 1]\r\n                ].filter(alive => alive).length;\r\n                \r\n                if(!grid[i][j] && numberOfNeighbors === 3){\r\n                    editGrid(newGrid, i, j, 1);\r\n                } else if(grid[i][j] && (numberOfNeighbors === 2 || numberOfNeighbors === 3)){\r\n                    editGrid(newGrid, i, j, 1)\r\n                } else {\r\n                    editGrid(newGrid, i, j, 0);\r\n                }\r\n            }\r\n        }\r\n\r\n        setGrid(newGrid);\r\n\r\n        setTimeout(() => runSimulation(), 500);\r\n    }, [grid]);\r\n\r\n    const renderGrid = useMemo(() => {\r\n        return grid.map((row, i) => row.map((col, j) => <Cell running={running} key={`${i}-${j}`} alive={col} onClick={() => {\r\n            if(runningRef.current) return;\r\n            let newGrid = editGrid(grid, i, j);\r\n            setGrid(newGrid);\r\n        }} />));\r\n    }, [grid, running]);\r\n\r\n    return (\r\n        <GridWrapper>\r\n            <Controls \r\n                rows={ROWS}\r\n                resetGame={setGrid}\r\n                setRunning={setRunning}\r\n                runSimulation={runSimulation} \r\n                running={running} \r\n                runningRef={runningRef}\r\n            />\r\n            <Grid2D>\r\n                {renderGrid}\r\n            </Grid2D>\r\n        </GridWrapper>\r\n    )\r\n}\r\n\r\nexport default Grid;","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst WIDTH = 9;\r\nconst HEIGHT = 9;\r\n\r\nconst RES = 1;\r\n\r\nconst ROWS = WIDTH / RES;\r\nconst COLS = HEIGHT / RES;\r\n\r\nconst MicroGrid = styled.div`\r\n    display: grid;\r\n    height: ${HEIGHT}rem;\r\n    width: ${WIDTH}rem;\r\n    grid-template-rows: repeat(${ROWS}, 1fr);\r\n    grid-template-columns: repeat(${COLS}, 1fr);\r\n`\r\n\r\nconst Cell = styled.div`\r\n    background-color: ${({alive}) => !alive ? \"rgba( 45, 49, 58, 0.65 )\" : \"black\"};\r\n    height: ${RES}rem;\r\n    width: ${RES}rem;\r\n    border: 0.5px solid #fff;\r\n`\r\n\r\nconst MicroLife = () => {\r\n\r\n    const [grid, setGrid] = useState(() => {\r\n        const rows = [];\r\n        for(let i = 0; i < ROWS; i++){\r\n            rows.push(Array.from(Array(COLS).fill(Math.floor(Math.random() * 2))));\r\n        }\r\n        return rows;\r\n    });\r\n\r\n\r\n    const runMicroGrid = useCallback(() => {\r\n\r\n        let newGrid = [];\r\n        for(let i = 0; i < ROWS; i++){\r\n            newGrid.push(Array.from(Array(COLS).fill(Math.floor(Math.random() * 2))));\r\n        }\r\n\r\n        setGrid(newGrid);\r\n\r\n        setTimeout(() => runMicroGrid(), 1000);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        runMicroGrid();\r\n    }, []);\r\n\r\n\r\n    const renderGrid = useMemo(() => {\r\n        return grid.map((row, i) => row.map((col, j) => <Cell key={`${i}-${j}`} alive={col}/>))\r\n    }, [grid]);\r\n\r\n    return (\r\n        <MicroGrid>\r\n            {renderGrid}\r\n        </MicroGrid>\r\n    )\r\n}\r\n\r\nexport default MicroLife;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * COMPONENTS\r\n */\r\n\r\nimport MicroLife from \"./MicroLife\";\r\n\r\nconst GameLogoWrapper = styled.div`\r\n    display: flex;\r\n    background: rgba( 65, 105, 225, 0.75 );\r\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\r\n    backdrop-filter: blur( 1.0px );\r\n    -webkit-backdrop-filter: blur( 1.0px );\r\n    border-radius: 10px;\r\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\r\n    padding: 1.25rem;\r\n`\r\n\r\nconst Headings = styled.div`\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 0 1rem 0 1rem;\r\n`\r\n\r\nconst HeadingLogo = styled.h1`\r\n    font-size: 3.8rem;\r\n    color: #ffffff;\r\n`\r\nconst SubHeadingLogo = styled.h4`\r\n    width: 100%;\r\n    margin-top: auto;\r\n    align-self: flex-end;\r\n    padding: 0 2rem 0 0;\r\n    font-size: 1.2rem;\r\n    font-style: italic;\r\n    font-weight: bold;\r\n    color: #ffffff;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst InfoButton = styled.div`\r\n    border: 0.3rem solid #ffffff;  \r\n    cursor: pointer;\r\n    width: 3rem;\r\n    height: 3rem;\r\n    border-radius: 1.5rem;\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: white;\r\n    text-align: center;\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n`\r\n\r\nconst Logo = () => {\r\n    return (\r\n        <GameLogoWrapper>\r\n            <Headings>\r\n                <HeadingLogo>Game of Life</HeadingLogo>\r\n                <SubHeadingLogo>\r\n                    <InfoButton>i</InfoButton>\r\n                    By John Horton Conway\r\n                </ SubHeadingLogo>\r\n            </Headings>\r\n            <MicroLife />\r\n        </ GameLogoWrapper >\r\n    )\r\n}\r\n\r\nexport default Logo;","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * COMPONENTS\r\n */\r\nimport Logo from \"./Logo\";\r\n\r\nconst HeadingWrapper = styled.div`\r\n    diplay: flex;\r\n    padding: 2rem 1rem 2rem 1rem;\r\n    flex: 1;\r\n`\r\n\r\nconst Heading = () => {\r\n    return (\r\n        <HeadingWrapper>\r\n            <Logo />\r\n        </HeadingWrapper>\r\n    )\r\n}\r\n\r\nexport default Heading;","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst InfoSectionWrapper = styled.section`\r\n    padding: 1rem;\r\n    flex: 4;\r\n    background: rgba( 65, 105, 225, 0.75 );\r\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\r\n    backdrop-filter: blur( 1.0px );\r\n    -webkit-backdrop-filter: blur( 1.0px );\r\n    border-radius: 10px;\r\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\r\n    margin: 1rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`\r\n\r\nconst QuoteWrapper = styled.div`s\r\n    width: 95%;\r\n    height: 20rem;\r\n    background: rgba( 65, 105, 225, 0.75 );\r\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\r\n    backdrop-filter: blur( 1.0px );\r\n    -webkit-backdrop-filter: blur( 1.0px );\r\n    border-radius: 10px;\r\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\r\n    margin: 0.5rem;\r\n    display: flex;\r\n    align-items:center;\r\n`\r\n\r\nconst Quote = styled.div`\r\n    color: white;\r\n    font-size: 1.6rem;\r\n    padding: 1.5rem;\r\n`\r\n\r\nconst InfoSection = () => {\r\n\r\n    const [isActive, setIsActive ] = useState(false);\r\n\r\n    return (\r\n        <InfoSectionWrapper>\r\n            <QuoteWrapper>\r\n                <Quote>\r\n                    The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\r\n                    It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input.\r\n                    One interacts with the Game of Life by creating and initial configuration and observing how it evolves.\r\n                </Quote>\r\n            </QuoteWrapper>\r\n        </InfoSectionWrapper>\r\n    )\r\n}\r\n\r\n\r\nexport default InfoSection;","import React from \"react\"\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * COMPONENTS\r\n */\r\nimport Heading from \"./Heading\";\r\nimport InfoSection from \"./InfoSection\";\r\n\r\nconst SectionWrapper = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 40rem;\r\n    height: 90vh;\r\n    background: rgba( 45, 49, 58, 0.25 );\r\n    box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );\r\n    backdrop-filter: blur( 5.0px );\r\n    -webkit-backdrop-filter: blur( 5.0px );\r\n    border-radius: 10px;\r\n    border: 1px solid rgba( 255, 255, 255, 0.18 );\r\n`\r\n\r\nconst Section = () => {\r\n    return (\r\n        <SectionWrapper>\r\n            <Heading />\r\n            <InfoSection />\r\n        </SectionWrapper>\r\n    )\r\n}\r\n\r\nexport default Section;","import React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * COMPONENTS\n */\nimport Grid from \"../components/Grid\";\nimport Section from \"../components/Section\";\n\nconst AppWrapper = styled.div`\n  height: 100vh;\n  background: #4169e1;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n`;\n\nfunction App() {\n  \n  return (\n    <AppWrapper>\n      <Section />\n      <Grid />\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}